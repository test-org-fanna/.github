name: Django Tests with Migration Check and Coverage

on:
  workflow_call:
    inputs:
      # Required
      postgres_db:
        type: string
        required: true
      postgres_user:
        type: string
        required: true
      postgres_host:
        type: string
        required: true
      # Optional
      python_versions:
        type: string
        description: A JSON string list of all python versions to run these tests on
        default: "['3.11.2']"
      poetry_versions:
        type: string
        description: A JSON string list of all python versions to run these tests on
        default: "['1.8.4']"
      working_directory:
        type: string
        description: Whenever the django app (i.e. manage.py) is not in the root; the location can be specified here
        default: .
      num_test_processes:
        type: number
        description: The number of parallel test processes
        default: 2
    secrets:
      postgres_password:
        required: true
      private_pypi_url:
        type: string
        required: true
      private_pypi_user:
        type: string
        required: true
      private_pypi_password:
        type: string
        required: true

jobs:
  unit-tests-with-coverage:
    name: Django Tests With Postgres and Coverage for python version ${{ matrix.python.version }}
    strategy:
      matrix:
        python-version: ${{ fromJSON(inputs.python_versions) }}
        poetry-version: ${{ fromJSON(inputs.poetry_versions) }}
      runs-on: ubuntu-latest
      container: python:${{ matrix.python-version }}-alpine

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ inputs.postgres_db }}
          POSTGRES_USER: ${{ inputs.postgres_user }}
          POSTGRES_PASSWORD: ${{ secrets.postgres_password }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install needed apk packages
        run: apk update && apk add bash && apk add zstd && apk add tar

      - name: Load cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.working_directory }}/.venv
            /github/home/.local
          key: cache-poetry-${{ matrix.poetry_version }}-python-${{ matrix.python_version }}--${{ hashFiles('**/poetry.lock') }}

      - name: Add cache to path
        if: steps.cache.outputs.cache-hit == 'true'
        run: echo "/github/home/.local/bin" >> $GITHUB_PATH

      - name: Install Poetry V${{ matrix.poetry_version }}
        if: steps.cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry_version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Poetry; configure and (check) package install
        working-directory: ${{ inputs.working_directory }}
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          INSTALL_MSG=$(poetry install --dry-run 2>&1 | tail -1)
          if [[ "$INSTALL_MSG" != '' ]]; then
            echo "<h2>:no_entry_sign: Poetry install dry-run failed </h2>" >> $GITHUB_STEP_SUMMARY
            echo "<h3>You should probably run 'poetry lock' </h3>" >> $GITHUB_STEP_SUMMARY
            echo "$INSTALL_MSG" >> $GITHUB_STEP_SUMMARY
            exit 3
          fi
          poetry config repositories.repowered ${{ secrets.private_pypi_url}}
          poetry config http-basic.repowered ${{ secrets.private_pypi_user }} ${{ secrets.private_pypi_password}}
          poetry install --no-interaction --no-root --no-ansi

      - name: Run tests with coverage
        working-directory: django-test #INPUT
        run: |
          poetry run pytest --cov-config=.coveragerc --cov-report=xml --cov=. --durations=5 --numprocesses=2 2>&1 | tee /dev/stderr >test_report
          HAS_FAILURES=$(cat test_report | grep 'failed' )
          if [ -f test_report ]; then
              if [ "$HAS_FAILURES" == '' ]; then
                echo "<details><summary>:white_check_mark: Tests Succeeded</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                cat test_report >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
              else
                echo "<details><summary>:x: Tests Failed</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                cat test_report >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                exit 3
              fi
          fi
        env:
          CI: true
          COLUMNS: 120 # For the test output
          POSTGRES_DB: ${{ inputs.postgres_db }}
          POSTGRES_USER: ${{ inputs.postgres_user }}
          POSTGRES_HOST: ${{ inputs.postgres_host }}
          POSTGRES_PASSWORD: ${{ secrets.postgres_password }}
          POSTGRES_PORT: 5432

      - name: Archive test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml
          if-no-files-found: 'error'